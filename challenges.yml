webpack_encore_entry_tags:
  question: |
    When you run Encore, it builds the final files into a `public/build/` directory. Why do we use:
    ```html
    {{ encore_entry_script_tags('app') }}
    ```
    instead of the simpler:
    ```html
    <script src="/build/app.js"></script>
    ```
  explanation: |
    When Encore compiles your assets it's possible that the final `app.js` file will be split into
    multiple files, and this function will take care of including all the required link tags.
  features:
    multiple_choice:
      choices:
        a: |
          We can use any option, it doesn't matter.
        b: |
          This function will take care of including any other generated file.
        c: |
          Encore does not allows you to access to the final `app.js` final directly.
        d: |
          This function compiles your assets right before creating the link tags.
      correct: b
css_import_module:
  question: |
    Why did Ryan prefix the package name with a `~` when importing
    a CSS module?
  explanation: |
    Prefixing an import string with `~` tells Webpack to look for it
    inside the `node_modules/` directory.
  features:
    multiple_choice:
      choices:
        a: |
          It's required when importing a package from your home directory.
        b: |
          It makes the path relative.
        c: |
          It makes the path absolute.
        d: |
          It's required when importing a package from the `node_modules/` directory.
      correct: d
stimulus_controllers_convention:
  question: |
    What is the filename of the Stimulus controller that this element will connect to?
    
    ```html
    <div data-controller="api-manager"></div>
    ```
  explanation: |
    The simplest way to think about it is this: Stimulus remove the `_controller.js` part
    of your filename and the rest becomes the name of the controller.
    
    But in reality, Stimulus has a bit more flexibility, described here: https://stimulus.hotwire.dev/handbook/installing#controller-filenames-map-to-identifiers.
    For example, you can end your controller names in `-controller.js` instead of `_controller.js`.
    You can also use `_` in your names (e.g. `api_manager_controller.js`), though the name
    of your controller will always use dashes (this controller will still be called `api-manager`).
  features:
    multiple_choice:
      choices:
        a: |
          It will connect to the `api-manager-controller.js` file
        b: |
          It will connect to the `api-manager_controller.js` file
        c: |
          It will connect to the `api_manager.js` file
      correct: b
