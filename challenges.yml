webpack_encore_entry_tags:
  question: |
    What's the difference between these two Twig's functions
    `encore_entry_link_tags('app')` and `encore_entry_script_tags('app')`?
  explanation: |
    The function `encore_entry_link_tags('app')` will render the built version of the
    `app.css` file, and `encore_entry_script_tags('app')` will render the build version
    of the `app.js` file. And the `app` entry is defined in the `webpack.config.js` file.
  features:
    multiple_choice:
      choices:
        a: |
          None, both functions do the same thing
        b: |
          `encore_entry_link_tags('app')` is for rendering styles tags
          and `encore_entry_script_tags('app')` is for rendering script tags
        c: |
          `encore_entry_link_tags('app')` is for rendering script tags
          and `encore_entry_script_tags('app')` is for rendering styles tags
        d: |
          `encore_entry_link_tags('app')` is for rendering `noscript` tags
          and `encore_entry_script_tags('app')` is for rendering script tags
      correct: b
css_import_module:
  question: |
    Why did Ryan prefix the package name with a `~` when importing
    a CSS module?
  explanation: |
    Prefixing an import string with `~` tells Webpack to look for it
    inside the `node_modules/` directory.
  features:
    multiple_choice:
      choices:
        a: |
          It's required when importing a package from your home directory.
        b: |
          It makes the path relative.
        c: |
          It makes the path absolute.
        d: |
          It's required when importing a package from the `node_modules/` directory.
      correct: d
stimulus_controllers_convention:
  question: |
    What is the filename of the Stimulus controller that this element will connect to?
    
    ```html
    <div data-controller="api-manager"></div>
    ```
  explanation: |
    The simplest way to think about it is this: Stimulus remove the `_controller.js` part
    of your filename and the rest becomes the name of the controller.
    
    But in reality, Stimulus has a bit more flexibility, described here: https://stimulus.hotwire.dev/handbook/installing#controller-filenames-map-to-identifiers.
    For example, you can end your controller names in `-controller.js` instead of `_controller.js`.
    You can also use `_` in your names (e.g. `api_manager_controller.js`), though the name
    of your controller will always use dashes (this controller will still be called `api-manager`).
  features:
    multiple_choice:
      choices:
        a: |
          It will connect to the `api-manager-controller.js` file
        b: |
          It will connect to the `api-manager_controller.js` file
        c: |
          It will connect to the `api_manager.js` file
      correct: b
